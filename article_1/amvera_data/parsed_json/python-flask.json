{
    "text": "backend с использованием flask инстукция содержит туториал и видеопример развертывания flask приложения видеопример деплой flask приложения с базой данных postgresql details summary содержание видео summary таймкоды 00 00 intro 00 20 развертывание бд 01 00 подключение к бд 02 02 развертывание сайта 02 27 requirements txt 03 00 amvera yml 03 48 загрузка файлов 04 24 переменные окружения 05 24 постоянное хранилище data 05 42 подключение через git details eval rst youtube i dn7lk1mrw align center width 100 планирование создадим простое приложение на языке программирования python с использованием фреймворка flask это будет api для todo заметок eval rst admonition подсказка class hint для ознакомления с принципом работы с git рекомендуем эту статью https habr com ru articles 541258 которая позволит понять как создавать git репозиторий и вносить в него изменения каждая заметка будет определяться следующим образом text купить молоко done true все заметки будут храниться массивом в файле формата json определим api следующим образом get todo получает список всех todo get todo id получает todo с заданным id индексом в массиве post todo добавляет новую todo в конец списка put todo id заменяет todo с заданным id реализация для начала напишем само приложение так как наше приложение использует flask создадим файл requirements txt text flask 2 2 2 flask cors 3 0 10 gunicorn 20 1 0 напишем код приложения работающий локально в файле app py python import json from flask import flask request abort from flask cors import cors filename todo json def get data try with open filename r encoding utf 8 as f return json load f except filenotfounderror return def save data data with open filename w encoding utf 8 as f json dump data f app flask name cors cors app app route def index return todo app app route todo def get all todo return get data app route todo int id def get single todo id data get data if id 0 or id len data abort 404 return data id app route todo methods post def add new todo new todo request json if new todo is none abort 400 data get data data append new todo save data data return ok 201 app route todo int id methods put def update todo id data get data if id 0 or id len data abort 404 updated todo request json if updated todo is none abort 400 data id updated todo save data data return ok if name main app run port 8080 установим зависимости shell pip install r requirements txt запустим приложение shell python app py убедимся в его работоспособности при помощи postman подготовка приложения для amvera подготовим приложение для окружения amvera напишем amvera yaml написать yaml файл можно как самостоятельно используя инструкцию ниже так и воспользоваться нашим генератором yaml перейдя по ссылке https manifest amvera ru yaml meta environment python toolchain name pip run command gunicorn bind 0 0 0 0 5000 app app containerport 5000 так как для развертывания нашего приложения мы используем gunicorn добавим его в requirements txt text flask 2 2 2 flask cors 3 0 10 gunicorn 20 1 0 осталось решить проблему с сохранением файла с todo в data добавим import os в начало файла app py а также изменим объявление переменной filename python filename data todo json if amvera in os environ else todo json теперь начало файла app py выглядит так python import os import json from flask import flask request abort from flask cors import cors filename data todo json if amvera in os environ else todo json def get data остаток файла инициализируем репозиторий git shell git init добавим созданные нами файлы в индекс shell git add app py requirements txt amvera yml зафиксируем изменения shell git commit m todo app создание проекта в amvera теперь нужно создать приложение в amvera откроем страницу https cloud amvera ru projects https cloud amvera ru projects и нажмите кнопку создать в процессе создания приложение возьмем данные для git репозитория на этапе загрузка данных так же их можно найти во вкладке репозиторий самого приложения shell git remote add amvera https git amvera ru имя пользователя todo app git push amvera master config img quick start2 png после этого начнется сборка applications build md и развертывание applications run md приложения дождитесь появления статуса успешно развернуто проверка работоспособности снова воспользуемся postman для отправки запросов для проверки сохранности данных после перезагрузки перезапустим сервис кнопкой в интерфейсе после завершения перезапуска отправим запрос постманом для проверки наличия todo заметок если они есть значит мы все сделали правильно если что то не работает рекомендуем ознакомиться с логами сборки и приложения eval rst admonition подсказка class hint если логи пишутся в print для их отображения надо выставить переменную окружения pythonunbuffered в 1 eval rst admonition важно class warning сохраняйте файлы бд и иные изменяемые данные в постоянное хранилище чтобы избежать их потери при обновлении проекта когда производится откат папки код до состояния обновления репозитория папка data в корне проекта и директория data это разные директории проверить что сохранение идет в data можно зайдя в папку data на странице репозиторий eval rst admonition важно class warning чтобы избежать ошибки 502 измените в вашем коде host 127 0 0 1 или подобный localhost на 0 0 0 0 и пропишите в конфигурации порт который слушает ваше приложение пример 8080 поздравляем вы успешно создали свое первое приложение в amvera если у вас не получается развернуть проект напишите наблюдаемую вами симптоматику на support amvera ru с указанием вашего имени пользователя и названия проекта мы постараемся вам помочь",
    "metadata": {
        "file_name": "python-flask.md",
        "section_count": 9,
        "section_1": "Backend с использованием Flask",
        "section_2": "Видеопример - Деплой Flask приложения с базой данных PostgreSQL",
        "section_3": "Планирование",
        "section_4": "Реализация",
        "section_5": "Подготовка приложения для Amvera",
        "section_6": "... остаток файла",
        "section_7": "Создание проекта в Amvera",
        "section_8": "Проверка работоспособности",
        "section_9": "Если у вас не получается развернуть проект "
    }
}