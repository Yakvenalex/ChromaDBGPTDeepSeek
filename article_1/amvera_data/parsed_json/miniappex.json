{
    "text": "mini apps со stage и prod привязкой github бд и связкой backend и frontend развернутых в разных проектах развертывание backend frontend database postgresql sqlite для работы web приложения состоящего из backend frontend и базы данных в amvera вам нужно создать отдельные проекты для каждого из частей веб приложения и связать их по доменному имени причем можно связать как по внутреннему доменному имени https docs amvera ru applications configuration network html id2 так и внешнему https docs amvera ru applications configuration network html id3 к примеру можно отправлять запросы к backend по конкретному созданному маршруту и внешнему доменному имени добавим маршрут hello с post методом в backend app post hello async req res await sendalertmessage req body res status 200 send а в frontend создадим запрос по внешней ссылке const fetchresponse await fetch https backend username amvera io hello как привязать бесплатное доменное имя amvera или свое из лк регистратора на примере miniapp свяжем бота и frontend по внешнему доменному имени с протоколом https telegram требует использование https протокола при привязке webapp к боту создадим домен 1 во вкладке настройки ищем секцию с доменными именами и в правом верхнем углу жмем на кнопку добавить доменное имя 2 в параметре тип подключения выбираем https а в типе домена выбираем бесплатный домен amvera если не планируете привязать свой в случае если вы хотите привязать собственное доменное имя на примере регистратора reg ru следуйте этой инструкции https docs amvera ru applications configuration network html id5 подтверждаем и привязываем доменное имя нужно подождать около 2 х минут для полной привязки домена и выдачи сертификата получившийся адрес копируем и отправляем botfather или вставляем в коде как webapp для привязки подключение бд postgresql или sqlite postgresql подключить postgresql вы можете также либо по внутреннему доменному имени либо используя внешнее создав его с типом подключения postgres так создается контроллер который перенаправляет tcp трафик https docs amvera ru applications configuration network html tcp на сервис доступа подключимся по внутреннему доменному имени из проекта развернутого в amvera с доступом к записи и чтению python import psycopg2 conn psycopg2 connect dbname dbname user postgres password passwd host amvera username cnpg projectname rw sqlite файл базы данных sqlite всегда следует помещать в постоянное хранилище data https docs amvera ru applications storage html data иначе данные могут потеряться при пересборке связано это с тем что при сборке файлы из code копируются в artifacts папку работающего приложения именно там и происходит взаимодействие с базой данных а после пересборки файл перезапишется той версией загруженной в code загружать в data нужно во вкладке репозиторий выбрав папку data в выпадающем списке и нажав кнопку загрузить данные важно загрузить что либо в data нельзя если проект не развертывался для начала нужно собрать приложение подробнее https docs amvera ru applications storage html data после загрузки получить доступ к файлу можно по пути data имя файла или если вы меняли значение persistencemount то нужно заменить data на введенное вами значение на примере python python import sqlite3 connection sqlite3 connect data my database db привязка github если вы хотите привязать сторонний git сервис к проекту то для этого вам понадобится создать и настроить вебхук для репозитория в git сервисе разберем на примере github перейдем во вкладку репозиторий требуемого проекта там раскрываем блок подключить github gitlab bitbucket сразу копируем url и выбираем git service в нашем случае это github ивент при котором репозиторий amvera будет делать git pull при этом если будет выбран и push и ci ивенты то репозиторий будет реагировать на ci ивент добавьте секрет либо сгенерируйте его через интерфейс он нужен будет при подключении вебхука в github если ваш репозиторий приватный добавьте значение токен который создается в настройках аккаунта вписываем ветку удаленного репозитория это нужно если вы планируете использовать два проекта stag и prod по умолчанию будет ветка master нажимаем кнопку подключить и переходим в настройки репозитория github далее в настройки webhook и вставляем скопированную ссылку в поле payload url и секрет в поле secret и выберите content type application json включаем ssl верификацию и выбираем send me everything применяем изменения и теперь при пуше в ветку master github репозитория будет выполняться git pull и сборка начнется автоматически stage prod проекты для создания stage prod проектов мы используем привязку различных веток стороннего git сервиса создадим два проекта и для каждого из них привяжем вебхук в репозитории для разделения на stage и prod при привязке в интерфейсе amvera укажем нужную ветку удаленного репозитория для prod prod в первом проекте для stage соответственно stage во втором проекте в настройках репозитория github создавать ветки не нужно теперь мы можем пушить изменения следующей командой git push origin master имя ветки например так git push github master prod и git pull выполнится только в требуемом проекте добавление переменных окружения очень часто в проектах требуется использование переменных окружения так как это удобно и безопасно важно при сборке переменные окружения указанные через интерфейс недоступны перейдите во вкладку переменные проекта там вы сможете создать секрет переменная значение которого нельзя увидеть через интерфейс и обычную переменную к примеру создадим один секрет содержащий токен и обычную переменную с именем доступ к переменным осуществляется через код например в python можно получить доступ к переменной token следующим образом import os os getenv token переменные из env файла также будут подтягиваться соединение проектов по внутреннему доменному имени все проекты развернутые в amvera можно связать по внутреннему доменному имени и 80 порту к примеру если мы хотим подключиться к postgresql развернутому в amvera как значение host нужно вписать внутреннее доменное имя из блока доменных имен вкладки настройки проекта предварительная подготовка для развертывания каждого проекта написать yaml файл или dockerfile для yaml у нас есть генератор поддерживающий ограниченный набор окружений в остальных случаях рекомендуется использовать dockerfile https docs amvera ru books amvera page docker создать файл с зависимостями requirements txt для проектов на python привязать репозиторий к amvera сделать push в master создание yaml файла на примере для python для других языков процесс может отличаться подробно о том как вручную составить файл конфигурации описано в документации applications configuration config file md мы же воспользуемся автоматическим графическим инструментом генерации https manifest amvera ru python config img python tgbot png выбираем окружение python и версию указываем версию и путь до файла requirements txt очень важно указать все используемые в проекте пакеты в этом файле чтобы облако смогло их скачать через pip указываем путь до файла содержащего точку входа в программу тот файл который вы указываете интерпретатору питона когда запускаете приложение если в процессе работы ваш бот собирает какие то данные от пользователя которые следует сохранять на диск то их следует класть в папку data в противном случае при перезапуске проекта все данные будут потеряны порт можно указать любой так как в нашем случае он не играет никакой роли но в большинстве случаев мы рекомендуем использовать порт 80 именно он открыт в amvera нажимаем на кнопку generate yaml после чего начинается загрузка файла amvera yml скачанный файл кладем в корень нашего проекта создание файла с зависимостями применимо для проектов на python cоздать файл requirements txt в котором прописать строчку python telegram bot eval rst admonition внимание class attention в вашем проекте могут быть другие зависимости отличающиеся от зависимостей в этом примере их все нужно корректно прописать eval rst admonition подсказка class hint при развертывании телеграм ботов частой ошибкой является неверное название телебота в requirements txt телебот в requirements txt должен называться pytelegrambotapi а не telebot вызвать pip install r requirements txt чтобы установить этот пакет почему бы просто не установить пакет через pip install python telegram bot так тоже можно но файл requirements txt все равно понадобится для разворачивания в облаке поэтому лучше сразу его создать проверить что все работает можно запустив бот локально через python3 echobot py и протестировав созданный бот в телеграм ссылку на бот можно найти у botfather поместить ваш requirements txt в корень репозитория привязка git репозитория и push в master возможно три варианта 1 привязать к уже имеющемуся репозиторию папке инициализировать git репозиторий как установить git applications git rst если он ещё не установлен описано тут https git scm com book ru v2 d0 92 d0 b2 d0 b5 d0 b4 d0 b5 d0 bd d0 b8 d0 b5 d0 a3 d1 81 d1 82 d0 b0 d0 bd d0 be d0 b2 d0 ba d0 b0 git в корне нашего проекта даем команду git init если гит уже инициализирован в вашем проекте то этого делать не нужно привязываем наш локальный гит репозиторий к удаленному репозиторию через команду которая указана на странице проекта в amvera shell git remote add amvera https git amvera ru имя пользователя транслитерированное имя проекта проверяем что все изменения закомичены вызывая git status если там будет список файлов то значит нужно их закомитить выполнив shell git add git commit m some informative msg отправляем изменения в репозиторий amvera shell git push amvera master на запрос пользователя и пароля укажите имя пользователя и пароль вашей учетной записи amvera 2 использовать выделенный репозиторий amvera а не привязывать свой склонируем пустой репозиторий shell git clone https git amvera ru имя пользователя транслитерированное имя проекта проверяем что все изменения закомичены вызывая git status если там будет список файлов то значит нужно их закомитить выполнив shell git add git commit m some informative msg отправляем изменения в репозиторий amvera shell git push amvera master на запрос пользователя и пароля укажите имя пользователя и пароль вашей учетной записи amvera 3 привязка github gitlab как показано выше в инструкции развертывание приложения после того как проект запушится в систему начнется сборка applications build md и на странице проекта статус поменяется на выполняется сборка как только проект соберется он перейдет в стадию запуска applications run md и статус сменится на выполняется развертывание а после перейдет в успешно развернуто если по какой то причине проект не развернулся можно обратиться к логам сборки и логам приложения для отладки они могут идти с задержкой в 5 10 минут если проект завис в статусе сборка на долгое время а логи сборки не отображаются то стоит ещё раз проверить корректность amvera yaml файла и requirements txt только в случае с python файла eval rst admonition подсказка class hint если логи пишутся в print для их отображения надо выставить переменную окружения pythonunbuffered в 1 eval rst admonition важно class warning сохраняйте файлы бд и иные изменяемые данные в постоянное хранилище чтобы избежать их потери при обновлении проекта когда производится откат папки код до состояния обновления репозитория папка data в корне проекта и директория data это разные директории проверить что сохранение идет в data можно зайдя в папку data на странице репозиторий eval rst admonition важно class warning чтобы избежать ошибки 502 измените в вашем коде host 127 0 0 1 или подобный localhost на 0 0 0 0 и пропишите в конфигурации порт который слушает ваше приложение пример 8080 если у вас не получается развернуть проект напишите наблюдаемую вами симптоматику на support amvera ru с указанием вашего имени пользователя и названия проекта мы постараемся вам помочь",
    "metadata": {
        "file_name": "miniappex.md",
        "section_count": 16,
        "section_1": "Mini Apps со stage и prod, привязкой GitHub, БД и связкой Backend и Frontend, развернутых в разных проектах ",
        "section_2": "Развертывание Backend + Frontend + Database (PostgreSQL | SQLite)",
        "section_3": "Как привязать бесплатное доменное имя Amvera или свое из ЛК регистратора",
        "section_4": "Подключение БД (PostgreSQL или SQLite)",
        "section_5": "PostgreSQL",
        "section_6": "SQLite",
        "section_7": "Привязка GitHub ",
        "section_8": "Stage/Prod проекты",
        "section_9": "Добавление переменных окружения",
        "section_10": "Соединение проектов по внутреннему доменному имени",
        "section_11": "Предварительная подготовка для развертывания каждого проекта",
        "section_12": "Создание YAML файла (на примере для Python, для других языков процесс может отличаться)",
        "section_13": "Создание файла с зависимостями (применимо для проектов на Python)",
        "section_14": "Привязка git-репозитория и push в master",
        "section_15": "Развертывание приложения",
        "section_16": "Если у вас не получается развернуть проект "
    }
}