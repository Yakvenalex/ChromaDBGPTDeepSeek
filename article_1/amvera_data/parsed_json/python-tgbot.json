{
    "text": "телеграм бот на python в этой статье мы рассмотрим как развернуть телеграм бота на python статья содержит текстовую инструкцию и несколько видеопримеров на ее основе видеопример №1 загрузка через git и интерфейс c базой данных sqlite details summary содержание видео summary таймкоды 00 00 про проект 02 25 создание файла requirements txt 03 00 загрузка через интерфейс 03 30 задание конфигурации 04 35 загрузка sqlite 05 30 загрузка через git 06 45 генерация конфигурационного файла amvera yml через сервис генерации 09 25 генерация конфигурационного файла amvera yml через интерфейс и выполнение git pull details eval rst youtube a5yjzmkt7di align center width 100 видеопример №2 загрузка через интерфейс eval rst youtube 1ssmx6wtf6w align center width 100 инструкция с загрузкой через push в git возьмем готовый пример эхо бота https github com python telegram bot python telegram bot blob master examples echobot py от создателя библиотеки для работы с телеграмом python telegram bot eval rst admonition подсказка class hint для ознакомления с принципом работы с git рекомендуем эту статью https habr com ru articles 541258 которая позволит понять как создавать git репозиторий и вносить в него изменения предварительная подготовка в телеграме через поиск найти бот botfather и запросить у него создание нового телеграм бота он попросит ввести название и username для бота после чего выдаст токен скопировать выданный токен и вставить его в файл примера эхо бота на место слова token в функции main написать yaml файл или dockerfile для yaml у нас есть генератор поддерживающий ограниченный набор окружений в остальных случаях рекомендуется использовать dockerfile https docs amvera ru books amvera page docker но в данном примере вам подойдет генератор yaml https manifest amvera ru создать файл с зависимостями requirements txt привязать репозиторий к amvera сделать push в master создание yaml файла подробно о том как вручную составить файл конфигурации описано в документации applications configuration config file md мы же воспользуемся автоматическим графическим инструментом генерации https manifest amvera ru python config img python tgbot png выбираем окружение python и версию указываем версию и путь до файла requirements txt очень важно указать все используемые в проекте пакеты в этом файле чтобы облако смогло их скачать через pip указываем путь до файла содержащего точку входа в программу тот файл который вы указываете интерпретатору питона когда запускаете приложение в нашем случае это файл echobot py если ваш файл находится не в корневой папке проекта то нужно указывать путь относительно корня проекта если бы мой файл был в папке src мы бы указали в этом поле src echobot py если в процессе работы ваш бот собирает какие то данные от пользователя которые следует сохранять на диск то их следует класть в папку data в противном случае при перезапуске проекта все данные будут потеряны порт можно указать любой так как в нашем случае он не играет никакой роли но в большинстве случаев мы рекомендуем использовать порт 80 именно он открыт в amvera нажимаем на кнопку generate yaml после чего начинается загрузка файла amvera yml скачанный файл кладем в корень нашего проекта создание файла с зависимостями cоздать файл requirements txt в котором прописать строчку python telegram bot eval rst admonition внимание class attention в вашем проекте могут быть другие зависимости отличающиеся от зависимостей в этом примере их все нужно корректно прописать eval rst admonition подсказка class hint при развертывании телеграм ботов частой ошибкой является неверное название телебота в requirements txt телебот в requirements txt должен называться pytelegrambotapi а не telebot вызвать pip install r requirements txt чтобы установить этот пакет почему бы просто не установить пакет через pip install python telegram bot так тоже можно но файл requirements txt все равно понадобится для разворачивания в облаке поэтому лучше сразу его создать проверить что все работает можно запустив бот локально через python3 echobot py и протестировав созданный бот в телеграм ссылку на бот можно найти у botfather поместить ваш requirements txt в корень репозитория привязка git репозитория и push в master возможно два варианта 1 привязать к уже имеющемуся репозиторию папке инициализировать git репозиторий как установить git applications git rst если он ещё не установлен описано тут https git scm com book ru v2 d0 92 d0 b2 d0 b5 d0 b4 d0 b5 d0 bd d0 b8 d0 b5 d0 a3 d1 81 d1 82 d0 b0 d0 bd d0 be d0 b2 d0 ba d0 b0 git в корне нашего проекта даем команду git init если гит уже инициализирован в вашем проекте то этого делать не нужно привязываем наш локальный гит репозиторий к удаленному репозиторию через команду которая указана на странице проекта в amvera shell git remote add amvera https git amvera ru имя пользователя транслитерированное имя проекта проверяем что все изменения закомичены вызывая git status если там будет список файлов то значит нужно их закомитить выполнив shell git add git commit m some informative msg отправляем изменения в репозиторий amvera shell git push amvera master на запрос пользователя и пароля укажите имя пользователя и пароль вашей учетной записи amvera 2 использовать выделенный репозиторий amvera а не привязывать свой склонируем пустой репозиторий shell git clone https git amvera ru имя пользователя транслитерированное имя проекта проверяем что все изменения закомичены вызывая git status если там будет список файлов то значит нужно их закомитить выполнив shell git add git commit m some informative msg отправляем изменения в репозиторий amvera shell git push amvera master на запрос пользователя и пароля укажите имя пользователя и пароль вашей учетной записи amvera развертывание приложения после того как проект запушится в систему начнется сборка applications build md и на странице проекта статус поменяется на выполняется сборка как только проект соберется он перейдет в стадию запуска applications run md и статус сменится на выполняется развертывание а после перейдет в успешно развернуто если по какой то причине проект не развернулся можно обратиться к логам сборки и логам приложения для отладки они могут идти с задержкой в 5 10 минут если проект завис в статусе сборка на долгое время а логи сборки не отображаются то стоит ещё раз проверить корректность amvera yaml файла и requirements txt файла eval rst admonition подсказка class hint если логи пишутся в print для их отображения надо выставить переменную окружения pythonunbuffered в 1 eval rst admonition важно class warning сохраняйте файлы бд и иные изменяемые данные в постоянное хранилище чтобы избежать их потери при обновлении проекта когда производится откат папки код до состояния обновления репозитория папка data в корне проекта и директория data это разные директории проверить что сохранение идет в data можно зайдя в папку data на странице репозиторий eval rst admonition важно class warning чтобы избежать ошибки 502 измените в вашем коде host 127 0 0 1 или подобный localhost на 0 0 0 0 и пропишите в конфигурации порт который слушает ваше приложение пример 8080 если у вас не получается развернуть проект напишите наблюдаемую вами симптоматику на support amvera ru с указанием вашего имени пользователя и названия проекта мы постараемся вам помочь",
    "metadata": {
        "file_name": "python-tgbot.md",
        "section_count": 10,
        "section_1": "Телеграм бот на Python",
        "section_2": "Видеопример №1 ",
        "section_3": "Видеопример №2 ",
        "section_4": "Инструкция с загрузкой через push в git",
        "section_5": "Предварительная подготовка",
        "section_6": "Создание YAML файла",
        "section_7": "Создание файла с зависимостями",
        "section_8": "Привязка git-репозитория и push в master",
        "section_9": "Развертывание приложения",
        "section_10": "Если у вас не получается развернуть проект "
    }
}