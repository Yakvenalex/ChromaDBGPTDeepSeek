{
    "text": "перенос проекта из heroku в данном разделе будет предложен вариант миграции приложения из heroku в облако amvera сравнение процессов heroku и amvera несмотря на то что amvera вдохновлялся идеями heroku это не 100 клон и некоторые вещи делаются по разному важно понимать различия между этими двумя сервисами при переносе своего проекта eval rst youtube pz ksumfczo align center width 100 в этом видео подробно сравниваются два сервиса для развертывания приложений heroku и amvera а также показан пример переноса проекта с heroku на amvera процесс развертывания heroku использует трехступенчатый процесс развертывания приложения 1 сборка build 2 подготовка релиза release 3 запуск run на данный момент в amvera используется двухтупенчатый процесс 1 сборка build 2 запуск run в большинстве сценариев процесс release может быть включен в фазу сборки в будущем фаза release может быть добавлена и в amvera если вам нужна эта фаза напишите нам mailto support amvera ru мы передвинем эту задачу в более раннюю версию amvera окружение heroku пытается определить окружение инструменты сборки зависимости команды самостоятельно и если это не получается или heroku делает это неправильно сборка приложения проваливается то пользователь может указать окружение самостоятельно такие окружения в heroku называется buildpack управление buildpack осуществляется инструментом командной строки heroku amvera позволяет указать окружение в файле конфигурации configuration config file md amvera yml если окружение не указано подразумевается окружение docker аналог стека container в heroku написать yaml файл можно как самостоятельно используя инструкцию ниже так и воспользоваться нашим генератором yaml перейдя по ссылке https manifest amvera ru управление процессами heroku позволяет запустить процессы нескольких типов из одного проекта например основной процесс слушающий веб интерфейс web и вспомогательные рабочие процессы worker такие процессы могут масштабироваться индивидуально amvera придерживается принципа один проект один тип процесса каждый проект может также масштабироваться индивидуально так если у вас монорепозиторий в котором находится код как основного процесса так и код рабочих процессов вам придется отправить его в два разных проекта на amvera в идеале разделить код на несколько репозиториев если вам нужна поддержка процессов разных типов в одном проекте напишите нам mailto support amvera ru мы готовы внедрить такой подход при достаточном интересе со стороны пользователей heroku проект с procfile простой вариант один тип процесса нет процесса release details summary python summary procfile web python3 bagend py создайте в корне репозитория файл amvera yml meta environment python toolchain name pip run scriptname bagend py подробнее о том что это значит environments python pip md details details summary javascript node js summary procfile web node bagend js создайте в корне репозитория файл amvera yml meta environment node toolchain name npm version 18 run scriptname bagend js подробнее о том что это значит environments nodejs server md details details summary jvm maven summary procfile web java jar bagend jar создайте в корне репозитория файл amvera yml meta environment jvm toolchain name maven version 17 run jarname bagend jar подробнее о том что это значит environments jvm maven md details details summary jvm gradle summary procfile web java jar bagend jar создайте в корне репозитория файл amvera yml meta environment jvm toolchain name gradle version 17 run jarname bagend jar подробнее о том что это значит environments jvm gradle md details details summary что то другое summary скорее всего мы пока не поддерживаем сборку вашего окружения нативно и вместо этого нужно использовать окружение docker однако список поддерживаемых окружений со временем обновляется актуальную информацию о поддерживаемых окружениях можно найти здесь supported env rst чтобы не оставлять вас совсем без информации как это делается рассмотрим пример приложения на go dockerfile from golang 1 19 workdir app copy bagend go go mod run cgo enabled 0 go build a installsuffix cgo o bagend from alpine latest workdir app copy from 0 app bagend amvera yml run command app bagend args port 8080 containerport 8080 подробнее о том что это значит configuration docker md details вариант с одним типом процесса есть процесс release details summary python summary procfile release python3 manage py migrate web python3 manage py runserver 0 0 0 0 8000 создайте в корне репозитория файл amvera yml meta environment python toolchain name pip run command python3 manage py migrate python3 manage py runserver 0 0 0 0 8000 containerport 8000 подробнее о том что это значит environments python pip md details details summary javascript node js summary procfile release npm run migrate web node bagend js создайте в корне репозитория файл amvera yml meta environment node toolchain name npm version 18 build additionalcommands npm run migrate run scriptname bagend js подробнее о том что это значит environments nodejs server md details details summary что то другое summary скорее всего мы пока не поддерживаем сборку вашего окружения нативно или для вашего стека технологий пока нет возможности запускать произвольные команды и вместо этого нужно использовать окружение docker однако список поддерживаемых окружений со временем обновляется актуальную информацию о поддерживаемых окружениях можно найти здесь supported env rst чтобы не оставлять вас совсем без информации как это делается рассмотрим пример приложения на go dockerfile from golang 1 19 workdir app copy bagend go go mod run cgo enabled 0 go build a installsuffix cgo o bagend from alpine latest workdir app copy from 0 app bagend amvera yml run command bash args c migrate sh app bagend containerport 8080 подробнее о том что это значит configuration docker md details вариант с несколькими типами процессов details summary python summary procfile web python3 bagend py worker python3 erebor py разделите проект на два в первом будет аналогом процесса web в корне создайте файл amvera yml meta environment python toolchain name pip run scriptname bagend py во втором проекте будет аналогом процесса worker в корне создайте файл amvera yml meta environment python toolchain name pip run scriptname erebor py подробнее о том что это значит environments python pip md details details summary javascript node js summary procfile web node bagend js worker node erebor js разделите проект на два в первом будет аналогом процесса web в корне создайте файл amvera yml meta environment node toolchain name npm version 18 run scriptname bagend js во втором проекте будет аналогом процесса worker в корне создайте файл amvera yml meta environment node toolchain name npm version 18 run scriptname erebor js подробнее о том что это значит environments nodejs server md details details summary jvm maven summary procfile web java jar bagend jar worker java jar erebor jar разделите проект на два в первом будет аналогом процесса web в корне создайте файл amvera yml meta environment jvm toolchain name maven version 17 run jarname bagend jar во втором проекте будет аналогом процесса worker в корне создайте файл amvera yml meta environment jvm toolchain name maven version 17 run jarname erebor jar подробнее о том что это значит environments jvm maven md details details summary jvm gradle summary procfile web java jar bagend jar worker java jar erebor jar разделите проект на два в первом будет аналогом процесса web в корне создайте файл amvera yml meta environment jvm toolchain name gradle version 17 run jarname bagend jar во втором проекте будет аналогом процесса worker в корне создайте файл amvera yml meta environment jvm toolchain name gradle version 17 run jarname erebor jar подробнее о том что это значит environments jvm gradle md details details summary что то другое summary скорее всего мы пока не поддерживаем сборку вашего окружения нативно и вместо этого нужно использовать окружение docker однако список поддерживаемых окружений со временем обновляется актуальную информацию о поддерживаемых окружениях можно найти здесь supported env rst общая рекомендация разделите ваш репозиторий на столько проектов сколько у вас процессов в procfile для каждого создайте файлы dockerfile и при необходимости amvera yml чтобы не оставлять вас совсем без информации как это делается рассмотрим пример приложения на go dockerfile from golang 1 19 workdir app copy bagend go go mod run cgo enabled 0 go build a installsuffix cgo o bagend from alpine latest workdir app copy from 0 app bagend amvera yml run command app bagend args port 8080 containerport 8080 подробнее о том что это значит configuration docker md details heroku проект с heroku yml файл heroku yml позволяет указать как собирать образ docker из вашего приложения для схожих целей применяется amvera yml секция setup файла heroku yml на данный момент не имеет аналогов из за того что в amvera пока не реализованы адд оны но мы работаем над этим а также не реализован проброс переменных окружения мы так же работаем над этим но из за того что переменные окружения могут содержать конфиденциальную информацию такую как ключи доступа и пароли доступ к ним будет осуществляться через веб интерфейс и интерфейс командной строки секция release файла heroku yml также на данный момент не поддерживается из за отсутствия фазы release в amvera действия описанные в этой фазе на данный момент лучше указать в dockerfile секция build файла heroku yml позволяет указать местоположение dockerfile а также переменные окружения для фазы сборки так как проброс переменных окружения еще не реализован эта возможность не поддерживается dockerfile в amvera ищется по предпопределенным путям amvera dockerfile dockerfile docker dockerfile deploy dockerfile deployment dockerfile если у вас dockerfile расположен по одному из этих путей он подхватится автоматически если нет путь до него можно указать в amvera yml heroku yml build docker web web dockerfile amvera yml build dockerfile web dockerfile секция run файла heroku yml позволяет указать команду в докер образе для запуска если команда указана в самом dockerfile она не указывается аналогично делается и в amvera yml но с несколько иным синтаксисом heroku yml build docker web dockerfile run web app bagend port port amvera yml run command app bagend args port 8080 containerport 8080 обратите внимание мы указали конкретный порт для приложения если ваше приложение опирается на наличие переменной окружения port она тоже задается и по умолчанию равна 80 или тому значению run containerport которое вы указали в amvera yml подробнее о развертывании образов docker configuration docker md heroku review apps на данный момент review apps в том виде в котором они реализованы в heroku не поддерживаются возможные ошибки если у вас при клонировании или пуше в репозиторий amvera возникает ошибка 404 но вы уверены что прописали адрес репозитория верно например скопировали скорее всего клиент git пытается авторизоваться с запомненными учетными данными другого репозитория github heroku etc для того чтобы выполнить вход с учетными данными amvera необходимо забыть старые учетные данные details summary для windows summary control panel credential manager в разделе generic credentials найдите учетные данные git обычно начинаются с git разверните их и нажмите кнопку remove после этого клиент git снова запросит данные для входа details details summary для mac os summary в командной строке выполните команду git credential osxkeychain erase команда ничего не выведет напечатайте в командную строку следующее host git amvera ru protocol https после этого нажмите клавишу return два раза команда завершит работу после этого клиент git снова запросит данные для входа details details summary для linux summary откройте файл home git credentials в текстовом редакторе и удалите нужные записи после этого клиент git снова запросит данные для входа details альтернативным вариантом является выполнение команды git config global unset user password решение проблем если вы столкнулись с проблемами в развертывании вашего heroku приложения в amvera или вам не хватает какой то функциональности напишите в техническую поддержку mailto support amvera ru мы проконсультируем вас по вопросам развертывания и рассмотрим ваши предложения по функциональности",
    "metadata": {
        "file_name": "heroku-migration.md",
        "section_count": 10,
        "section_1": "Перенос проекта из Heroku",
        "section_2": "Сравнение процессов Heroku и Amvera",
        "section_3": "Процесс развертывания",
        "section_4": "Окружение",
        "section_5": "Управление процессами",
        "section_6": "Heroku проект с Procfile",
        "section_7": "Heroku проект с heroku.yml",
        "section_8": "Heroku Review Apps",
        "section_9": "Возможные ошибки",
        "section_10": "Решение проблем"
    }
}