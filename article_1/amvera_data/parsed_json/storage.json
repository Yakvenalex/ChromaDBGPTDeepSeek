{
    "text": "хранилище и пути при работе с приложением облако amvera использует три различные папки для хранения пользовательских данных для правильной организации работы приложения и избежания потери данных стоит внимательно разобраться с особенностями каждой из них и изучить пример пример eval rst admonition определение class note монтирование папки — это процесс подключения файловой системы к определенному месту в иерархии файловой системы контейнера в результате монтирования содержимое выбранной папки становится доступным для использования внутри контейнеера по пути монтирования code это папка контролируемая инструментом контроля версий git git rst её содержимое напрямую зависит от того что закомичено в git и какая сейчас выбрана ветка для аналогии можно привести git репозиторий на локальном компьютере при выполнении git checkout содержимое меняется чтобы соответствовать выбранной ветке загрузка кода приложения в эту папку осуществляется при выполнении git push или при загрузке через интерфейс с выбранной папкой code файл конфигурации так же сохраняется в эту папку данная папка доступна только для загрузки кода и на этапе сборки build md приложения поэтому в процессе работы самого приложения доступа к ней нет и взаимодействие происходит с папкой artifacts artifacts в этой папке хранится результат сборки приложения так если это проект на python в ней будет содержаться все что было в папке code установленные зависимости для компилируемых языков там как правило хранятся бинарники соответсвующее указанному в файле конфигурации шаблону build artifacts в контейнер в котором запускается run md приложение эта папка монтируется в папку контейнера app команда на запуск приложения тоже выполняется из этой папки внутри контейнера поскольку содержимое этой папки однозначно получается путем сборки содержимого папки code бекапы данной папки на стороне амвера не делаются более того содержимое данной папки может быть полностью или частично утеряно при пересборке приложения при заморозке проекта файлы из данной папки полностью удаляются для большей наглядности советуем обратить внимание на пример в конце статьи eval rst admonition внимание class error не следует сохранять данные получаемые в процессе работы приложения в данную папку они могут быть утеряны используйте папку постоянного хранилища data amvera не несет ответсвенность за потерю файлов из данной папки data это папка постоянного хранилища которая на этапе запуска run md приложения монтируется в запускаемый контейнер в путь указанный в файле конфигурации в run persistencemount по умолчанию data eval rst admonition подсказка class tip в коде приложения путь сохранения данных в данную папку должен быть абсолютный например для случая по умолчанию data путь в коде будет data filename именно в этой папке стоит хранить данные которые собираются в процессе работы приложения и требуют постоянного хранения если ваше приложение использует sqlite базу данных или сохраняет логи которые требуется долго хранить то такие файлы должны находиться именно в этой папке помимо работы с этой папкой из приложения возможно так же загрузить удалить файлы используя интерфейс eval rst admonition важно class warning загрузка данных в данную папку возможна только после того как приложение хотя бы раз было успешно развернуто это связано с тем что папка создается на этапе развертывания приложения пример рассмотрим особенности работы с папками и их путями внутри контейнера 1 предположим ваш проект на python содержит следующие файлы которые загружаются в папку code ├─ main py ├─ config py ├─ amvera yaml ├─ requirements txt ├─ readme md └─ data ├─ users db └─ logs 2 после загрузки и процесса сборки папка code останется неизменной а содержимое папки artifacts станет следующим ├─ main py ├─ config py ├─ amvera yaml ├─ requirements txt ├─ readme md ├─ data ├─ users db └─ logs └─ venv ├─ lib one ├─ lib two └─ в ней оказалось содержимое папки code создалась папка venv в которой хранится виртуальное окружение с нужными библиотеками указанными в requirements txt 3 когда создается контейнер папка artifacts монтируется в папку app а папка data монтируется в путь указанный в конфигурации возьмем значение по умолчанию data внутри контейнера для запущенного приложения пути будут выглядеть следующим образом ├─ data ├─ persistant users db └─ logs └─ app ├─ main py ├─ config py ├─ amvera yaml ├─ requirements txt ├─ readme md ├─ data ├─ users db └─ logs └─ venv ├─ lib one ├─ lib two └─ по умолчанию команда запуска производится именно в папке app 4 запись данных рассмотрим два случая правильного и неправильного сохранения файлов требующих постоянное хранения неправильное если в коде обращение к файлу бд идёт с указанием пути data users db а к папке с логами по пути data logs то их абсолютные пути будут соответсвенно app data users db и app data logs что соответствует папке artifacts при перезагрузке и пересборке проекта эти файлы могут быть потеряны правильное указываем абсолютный путь к файлу с бд как data persistant users db и к логам как data logs таким образом файлы сохраняются в папку data и не будут потеряны при перезагрузке или пересборке 5 для продвинутых пользователей можно указать путь для монтирования папки data прямо внутрь подпапки в которую монтируются artifacts например выполнить монтирование в app data тогда дерево будет выглядеть следующим образом └─ app ├─ main py ├─ config py ├─ amvera yaml ├─ requirements txt ├─ readme md ├─ data эта папка уже не из artifacts а из data ├─ persistant users db └─ logs └─ venv ├─ lib one ├─ lib two └─ eval rst admonition внимание class error использование данного способа требует понимание принципа монтирования папок и может привести к непредсказуемому поведению работа с файлами через интерфейс для работы с файлами необходимо перейти во вкладку репозиторий и выбрать нужную папку любое действие совершаемое в папке code создает коммит в git репозиторий folder select img folder select png загрузка загрузка возможно только в папки code и data для загрузки требуется нажать кнопку загрузить данные и перетащив их в окно убедиться что они отобразились в списке uploaded file img uploaded file png удаление для удаления файла требуется нажать на иконку мусорная корзина в правом верхнем углу файла папки скачивание для скачивания файлов требуется нажать кнопку скачать данные и выбрать папки содержимое которых требуется сохранить локально download files img download files png",
    "metadata": {
        "file_name": "storage.md",
        "section_count": 6,
        "section_1": "Хранилище и пути",
        "section_2": "Code",
        "section_3": "Artifacts",
        "section_4": "Data",
        "section_5": "Пример",
        "section_6": " Работа с файлами через интерфейс"
    }
}