{
    "text": "fullstack на go создадим простое web приложение на языке программирования go где можно будет оставлять и читать цитаты для их хранения будем использовать субд postgresql директория приложения имеет следующую структуру code ├── static │ ├── styles css │ ├── script js │ └── index html ├── amvera yml ├── main go ├── go sum ├── go mod └── dockerfile код статических файлов доступен в конце страницы dockerfile шаги 1 создаем dockerfile в директории с проектом 2 в dockerfile указываем базовый образ с названием builder dockerfile from golang 1 21 1 as builder вместо 1 21 1 можете указать любую другую версию которая вам нужна 3 устанавливаем рабочую директорию dockerfile workdir app 4 копируем файлы main go go mod и go sum в текущую директорию рабочего каталога dockerfile copy main go go mod go sum 5 выполняем сборку проекта и создаем исполняемый файл server dockerfile run cgo enabled 0 go build a installsuffix cgo o server 6 используем образ alpine linux это уменьшит размер конечного образа и улучшит его производительность dockerfile from alpine latest 7 копируем исполняемый файл server собранный в предыдущем образе в текущую директорию рабочего каталога dockerfile copy from builder app server 8 копируем статические файлы внутрь контейнера dockerfile copy static static 9 открываем порт 80 для внешних подключений dockerfile expose 80 10 добавляем команду для запуска приложения dockerfile cmd server port 80 получившийся dockerfile dockerfile from golang 1 21 1 as builder workdir app copy main go go mod go sum run cgo enabled 0 go build a installsuffix cgo o server from alpine latest copy from builder app server copy static static expose 80 cmd server port 80 amvera yml написать yaml файл можно как самостоятельно так и воспользоваться нашим генератором yaml перейдя по ссылке https manifest amvera ru либо заполнить в разделе «конфигурация» личного кабинета пример файла amvera yml yaml meta environment docker toolchain docker build dockerfile dockerfile skip false run persistencemount data containerport 80 eval rst admonition подсказка class hint если вы используете dockerfile то конфигурационный файл amvera yaml можно не добавлять зависимости go mod и sum go инициализируем новый модуль для управления зависимостями для этого выполняем следующую команду которая создаст файл go mod bash go mod init main eval rst admonition подсказка class hint вместо main можно написать произвольную строку остаётся выполнить ещё одну команду которая добавит по две записи на каждую зависимость и создаст файл go sum bash go mod tidy развертывание субд postgresql базу данных нужно развернуть как отдельное приложение а затем можно будет подключаться к ней из основного приложения подробная инструкция доступна по ссылке https docs amvera ru databases postgresql html postgresql создание проекта в amvera последний шаг развернуть само приложение в файле main go содержится основной код и выполняется подключение к базе данных не забудьте поменять параметры для подключения к базе данных на те которые вы использовали в прошлом шаге при создании базы данных на amvera user имя пользователя password пароль пользователя dbname имя создаваемой бд параметр host можно найти на странице инфо вашего postgresql проекта например amvera username cnpg appname rw main go golang package main import database sql encoding json log net http strconv github com lib pq укажите те значения которые задавали при создании бд на amvera cloud const host amvera nskripko cnpg godb rw port 5432 user nick password href239 dbname godb func main portstr strconv itoa port dbinfo host host port portstr user user password password dbname dbname sslmode disable db err sql open postgres dbinfo if err nil log fatal err defer db close err db exec create table if not exists quotes id serial primary key quote text not null if err nil log fatal err http handlefunc quotes func w http responsewriter r http request if r method http methodget http error w method not allowed http statusmethodnotallowed return rows err db query select quote from quotes if err nil log println error querying database err http error w internal server error http statusinternalservererror return defer rows close var quotes string for rows next var quote string if err rows scan quote err nil log println error scanning rows err continue quotes append quotes quote json newencoder w encode quotes http handlefunc addquote func w http responsewriter r http request if r method http methodpost http error w method not allowed http statusmethodnotallowed return var data struct quote string json quote if err json newdecoder r body decode data err nil http error w bad request http statusbadrequest return err db exec insert into quotes quote values 1 data quote if err nil log println error inserting quote into database err http error w internal server error http statusinternalservererror return w writeheader http statuscreated fs http fileserver http dir static http handle fs log fatal http listenandserve 80 nil eval rst admonition важно class warning код является демонстрационным примером и мы настоятельно не рекомендуем указывать логин и пароль для подключения к базе данных в коде используйте переменные окружения секреты чтобы развернуть основное приложение в amvera нужно выполнить следующие простые шаги 1 открываем страницу https cloud amvera ru projects 2 нажимаем кнопку создать и выбираем тип сервиса приложение 3 выгружаем все файлы можно через git а можно через интерфейс убедитесь что вы выгрузили все нужные файлы go mod обязательно go sum обязательно main go обязательно dockerfile обязательно static index html если используете static script js если используете static styles css если используете amvera yml необязательно 4 после этого начнется сборка https docs amvera ru applications build html и развертывание https docs amvera ru applications run html приложения дождитесь появления статуса «успешно развернуто» проверка работоспособности 1 переходим в настройки проекта и активируем доменное имя img go full test web app png 2 теперь можно перейти по данному url и откроется наше приложение img go full app example png если что то не работает рекомендуем ознакомиться с логами сборки и приложения поздравляем вы успешно создали свое первое приложение в amvera код статических файлов static index html html doctype html html lang en head meta charset utf 8 meta name viewport content width device width initial scale 1 0 title quote board title link rel stylesheet href styles css head body div class container h1 quote board h1 form id quoteform input type text id quoteinput placeholder enter your quote required button type submit submit button form div id quotelist div div script src script js script body html static styles css css body font family arial sans serif container max width 600px margin 50px auto padding 0 20px input type text width calc 100 80px padding 10px margin right 10px button padding 10px 20px background color 007bff color fff border none cursor pointer button hover background color 0056b3 quotelist margin top 20px static script js javascript document addeventlistener domcontentloaded const quoteform document getelementbyid quoteform const quoteinput document getelementbyid quoteinput const quotelist document getelementbyid quotelist function to fetch quotes from the server and display them const fetchquotes async try const response await fetch quotes const quotes await response json clear previous quotes quotelist innerhtml append new quotes to the list quotes foreach quote const quoteitem document createelement div quoteitem textcontent quote quotelist appendchild quoteitem catch error console error error fetching quotes error fetch initial quotes when the page loads fetchquotes submit quote form quoteform addeventlistener submit async event event preventdefault const newquote quoteinput value trim if newquote alert please enter a quote return try send the new quote to the server await fetch addquote method post headers content type application json body json stringify quote newquote clear the input field quoteinput value fetch and display updated quotes fetchquotes catch error console error error adding quote error",
    "metadata": {
        "file_name": "go_full.md",
        "section_count": 9,
        "section_1": "Fullstack на Go",
        "section_2": "Dockerfile",
        "section_3": "Шаги:",
        "section_4": "Amvera.yml",
        "section_5": "Зависимости (go.mod и sum.go)",
        "section_6": "Развертывание СУБД (PostgreSQL)",
        "section_7": "Создание проекта в Amvera",
        "section_8": " Проверка работоспособности",
        "section_9": "Код статических файлов"
    }
}