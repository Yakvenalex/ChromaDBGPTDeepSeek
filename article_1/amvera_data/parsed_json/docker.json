{
    "text": "docker для сборки и развертывания своего приложения в контейнере docker можно вообще не писать файл конфигурации config file md amvera yaml достаточно написать dockerfile однако для более точной настройки файл amvera yaml может понадобиться settings img docker proc png при использовании dockerfile сначала инициализируется процесс сборки образа запускаемый в отдельном контейнере с доступом к папке code по завершению сборки образ загружается в хранилище registry после успешной загрузки образа инициализируется процесс разворачивания приложения в процессе которого создается контейнер из полученного ранее образа eval rst admonition важно class warning docker compose yml не поддерживается возможно использование только классического dockerfile конфигурационный файл для более точной настройки следует дополнять dockerfile файлом конфигурации amvera yaml использование файла конфигураци дает возможность пропустить сборку и запускать приложение с использованием готового общедоступного образа из сторонних registry так же можно указать папку монтирования постоянного хранилища секция meta для окружения docker секцию meta можно не писать вовсе по умолчанию она подразумевается следующей meta environment docker toolchain name docker секция build секция build поддерживает следующие параметры dockerfile путь до файла dockerfile относительно папки с исходным кодом без слэша в начале это необязательный параметр если его не указать то dockerfile будет искаться в следующих местах amvera dockerfile dockerfile docker dockerfile deploy dockerfile deployment dockerfile skip пропуск сборки образа применяется при запуске готовых образов docker секция run секция run поддерживает следующие параметры image образ для запуска вместо собранного обычно используется в сочетании с build skip yes command команда для запуска в указанном образе полезно в сочетании с run image в этом параметре указывается то что указывается в параметре entrypoint докерфайла или в параметре command для пода kubernetes обычно это имя команды без параметров args параметры команды указанной в run command в этом параметре указвается то что указывается в параметре cmd докерфайла или в параметре args для пода kubernetes с тем отличием что здесь параметры указываются обычной строкой а не массивом persistencemount абсолютный путь в файловой системе контейнера куда должна быть примонтирована папка с постоянным хранилищем storage md data по умолчанию равен data containerport номер порта tcp который слушает приложение в контейнере по умолчанию равен 80 рецепты свое приложение с нестандартным портом если ваше приложение работает по протоколу http но использует номер порта отличный от 80 это можно настроить следующим файлом amvera yml yaml run containerport 3000 свое приложение с нестандартным расположением dockerfile допустим dockerfile находится по пути myapp amvera dockerfile yaml build dockerfile myapp amvera dockerfile готовый образ docker если вам нужно запустить готовый образ docker который либо работает по протоколу http либо не принимает входящих соединений например бот можно пропустить фазу сборки и указать имя образа напрямую в качестве примера рассмотрим развертывание dokuwiki https hub docker com r linuxserver dokuwiki https hub docker com r linuxserver dokuwiki dokuwiki слушает порт 80 поэтому эту настройку нам менять не нужно а вот папку с данными нужно примонтировать по пути config получается следующий файл amvera yml yaml build skip yes run image lscr io linuxserver dokuwiki latest persistencemount config так как кроме файла amvera yml вам ничего не нужно это единственный файл который нужно отправить в репозиторий git созданный для проекта приложение с нестандартным entrypoint если вы написали приложение и не указали в dockerfile ни entrypoint ни cmd либо используете готовый образ и хотите использовать иное приложение из него нежели было предусмотрено разработчиком вам пригодятся параметры run command и run args для примера рассмотрим приложение на языке go go package main import fmt net http os func main var port string if len os args 2 os args 1 port port fmt sprintf v os args 2 else port 80 http handlefunc helloserver http listenandserve port nil func helloserver w http responsewriter r http request fmt fprintf w hello s r url path 1 dockerfile для него dockerfile from golang 1 19 workdir app copy server go go mod run cgo enabled 0 go build a installsuffix cgo o server from alpine latest workdir app copy from 0 app server чтобы запустить сервер нужно вызвать команду app server port 8080 но в dockerfile по тем или иным причинам это не написано укажем параметры запуска в amvera yml yaml run command app server args port 8080 containerport 8080",
    "metadata": {
        "file_name": "docker.md",
        "section_count": 10,
        "section_1": "Docker",
        "section_2": "Конфигурационный файл",
        "section_3": "Секция meta",
        "section_4": "Секция build",
        "section_5": "Секция run",
        "section_6": "Рецепты",
        "section_7": "Свое приложение с нестандартным портом",
        "section_8": "Свое приложение с нестандартным расположением Dockerfile",
        "section_9": "Готовый образ Docker",
        "section_10": "Приложение с нестандартным ENTRYPOINT"
    }
}