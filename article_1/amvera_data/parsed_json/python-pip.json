{
    "text": "python pip данная конфигурация подходит если проект написан на языке python и либо не имеет зависимостей либо они прописаны в файле requirements txt создать yml файл можно в интерфейсе воспользоваться нашим генератором yaml перейдя по ссылке https manifest amvera ru либо самостоятельно используя инструкции ниже инструкция по заполнению конфигурации через интерфейс находится во второй половине данной статьи конфигурационный файл секция meta в секции мета задается версия python которую вы используете секция meta файла amvera yml будет выглядеть следующим образом yaml meta environment python toolchain name pip version 3 10 как для сборки так и для запуска используется образ docker python meta toolchain version параметр meta toolchain version необязательный если его не указать будет использоваться образ python 3 так как значение параметра meta toolchain version является тегом образа python можно в качестве его значения использовать произвольный тег на докер хабе https hub docker com python tags однако из за того что мы вызываем интерпретатор как python3 а также пользуемся модулем venv в команде python3 m venv образ python должен поддерживать эти возможности секция build в секции build указывается имя файла с зависимостями библиотеками которые система должна установить через pip в секции build может быть указан один необязательный параметр requirementspath он определяет путь до файла requirements txt относительно корня репозитория если этот параметр не задан он по умолчанию равен requirements txt если например этот файл находится в папке build то значение этого параметра необходимо указать следующим образом yaml build requirementspath build requirements txt если в проекте вообще не используется файл requirements txt или скрипт сборки не сможет его обнаружить по указанному пути то фаза установки зависимостей будет пропущена секция run в секции run могут быть указаны следующие параметры scriptname command persistencemount containerport параметры scriptname и command взаимоисключающие один из них должен быть указан для успешного запуска приложения параметр scriptname указывает путь до файла с расширением py он используется в команде python3 run scriptname yaml run scriptname app py в случае если запуск осуществляется другой командой например gunicorn то можно использовать параметр command yaml run command gunicorn bind 0 0 0 0 80 app app параметр persistencemount позволяет указать в какую директорию будет примонтирована папка с постоянным хранилищем storage md data по умолчанию имеет значение data постоянное хранилище и папка data в репозитории это разные директории рекомендуется использовать именно постоянное хранилище параметр containerport позволяет указать какой порт слушает приложение по умолчанию имеет значение 80 рецепты минимальный файл amvera yml yaml meta environment python toolchain name pip version 3 10 run scriptname app py wsgi приложение напр приложение на flask данный файл предполагает что gunicorn прописан в файле requirements txt yaml meta environment python toolchain name pip version 3 10 run command gunicorn bind 0 0 0 0 5000 app app containerport 5000 asgi приложение напр приложение на fastapi данный файл предполагает что uvicorn standard прописан в файле requirements txt yaml meta environment python toolchain name pip version 3 10 run command uvicorn host 0 0 0 0 port 5000 app app containerport 5000 форма графического интерфейса задать конфигурацию вы можете в интерфейсе личного кабинета при создании приложения либо в разделе конфигурация в созданном приложении python config img python config png секция meta в данной секции доступно только указание версии python которую требуется использовать секция build в данной секции возможно указать имя файла с зависимостями чаще всего это requirements txt если файл находится не в корне то следует указать название включающее относительный путь до него в файле зависимостей указываются библиотеки которые использует приложение устанавливалось на компьютер через pip когда запускался проект локально указывать стандартные библиотеки не нужно частой ошибкой является использование в файле requirements txt имени telebot а не pytelegrambotapi для телеграм ботов на python правильно pytelegrambotapi если например файл с зависимостями находится не в корне а в папке в примере ниже в папке в build то в значение этого поля необходимо указать build requirements txt если файл находится в корне requirements txt секция run параметры scriptname и command взаимоисключающие один из них должен быть указан для успешного запуска приложения scriptname в данном поле указывается имя файла который содержит точку входа в программу функцию main так в случае если проект состоит из одного файла с названием myapp py достаточно в это поле вписать myapp py command если проект запускается командой укажите вместо scriptname требуемую команду запуска примером может являться команда из статьи “быстрый старт” shell gunicorn bind 0 0 0 0 5000 app app либо в зависимости от порта shell command gunicorn bind 0 0 0 0 80 app app заполняется либо scriptname либо command persistencemount это папка постоянного хранилища в нашем сервисе она по умолчанию data eval rst admonition важно class warning файлы в data не затираются при пересборке проекта в отличие от репозитория где они откатятся к версии коммита поэтому мы рекомендуем использовать именно data для баз данных и других получаемых в процессе работы приложения файлов eval rst admonition частая ошибка class error если вы создадите в репозитории папку data это не то же самое что папка data у нас папка data в репозитории это просто папка в репозитории которая может быть затерта при пересборке проекта в коде проекта следует указать data как место для сохранения файлов если вам неудобно использовать каталог data обычно вы можете его изменить в файле amvera yml например persistencemount var myapp data задание значение persistencemount равной app или его подпапке может приводить к некорректному поведению conteinerport указывается порт который слушает приложение по умолчанию это 80 порт если ваше приложение работает по протоколу http но использует номер порта отличный от 80 требуется указать номер этого порта в данное поле например если приложение слушает порт 3000 то в поле вписывается значение 3000 применение конфигурации eval rst admonition важно class warning после заполнения соответствующих полей нажмите кнопки применить для раздела конфигурация или завершить если вы задаете параметры при создании проекта конфигурационный файл будет добавлен в корень репозитория и отобразится в папке code раздела репозиторий не забудьте добавить его в свой локальный репозиторий склонировав репозиторий из amvera либо скачав папку из личного кабинета после нажатия кнопки собрать в конфигурации либо пуше в репозиторий либо при нажатии кнопки завершить в рамках создания приложения начнется процесс сборки build md requirements txt файл с зависимостями мы рекомендуем составить файл requirements txt вручную указав только нужные зависимости с конкретной версией но вы можете воспользоваться командой pip freeze которая создаст нужный файл автоматически при этом могут быть добавлены лишние зависимости что замедлит сборку и зависимости с конфликтами версий чтобы получить список пакетов выполните команду в терминале pip freeze для записи вывода в requirements txt дополняем команду следующим образом pip freeze requirements txt команду выполняем в корне проекта там же появится и файл подразумевается использование активного venv его загружать к нам не нужно для текущего проекта при выполнении вне виртуальной среды текущего проекта могут быть подтянуты лишние пакеты не связанные с текущим проектом готовый requirements txt называется requirements txt и имеет следующую структуру имя библиотеки номер версии имя второй библиотеки номер версии пример text flask 2 2 2 flask cors 3 0 10 gunicorn 20 1 0 добавьте полученный файл в корень репозитория или по пути который вы указали в amvera yaml eval rst admonition подсказка class hint не нужно прописывать уже встроенные в python библиотеки такие как sqlite eval rst admonition подсказка class hint в файле прописываются те библиотеки которые вы локально устанавливали через pip install",
    "metadata": {
        "file_name": "python-pip.md",
        "section_count": 19,
        "section_1": "Python Pip",
        "section_2": "Конфигурационный файл",
        "section_3": "Секция meta",
        "section_4": "Секция build",
        "section_5": "Секция run",
        "section_6": "Рецепты",
        "section_7": "Минимальный файл amvera.yml",
        "section_8": "WSGI-приложение (напр., приложение на Flask)",
        "section_9": "ASGI-приложение (напр., приложение на FastAPI)",
        "section_10": "Форма графического интерфейса",
        "section_11": "Секция meta",
        "section_12": "Секция build",
        "section_13": "Секция run",
        "section_14": "scriptName",
        "section_15": "command",
        "section_16": "persistenceMount",
        "section_17": "conteinerPort",
        "section_18": "Применение конфигурации",
        "section_19": "requirements.txt - файл с зависимостями "
    }
}