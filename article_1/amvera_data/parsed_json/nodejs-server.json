{
    "text": "node js server данная конфигурация подходит если проект использует окружение node js и пакетный менеджер npm в этом случае проект может быть написан на таких языках как javascript или typescript данная конфигурация предназначена для серверных приложений для браузерных приложений см node js browser nodejs browser md написать yaml файл можно как самостоятельно используя инструкцию ниже так и воспользоваться нашим генератором yaml перейдя по ссылке https manifest amvera ru секция meta секция meta файла amvera yml будет выглядеть следующим образом yaml meta environment node toolchain name npm version 18 из параметров которые можно здесь менять это meta toolchain version логически это версия node js которую нужно использовать для работы технически значение version подставляется в имя образа docker который будет использован как для фазы сборки так и для фазы запуска используется образ node meta toolchain version так как для обеих фаз используется один и тот же образ meta toolchain version может быть любым тегом этого образа на докер хабе https hub docker com node tags секция build секция build может содержать следующие необязательные параметры skip additionalcommands artifacts параметр skip может использоваться если у проекта нет зависимостей и или отсутствует файл package json указание skip yes будет означать что фаза сборки будет целиком пропущена во время сборки скрипт выполняет команду npm install если нужно выполнить дополнительные команды например npm run build используется параметр additionalcommands yaml build additionalcommands npm run build в этом случае во время сборки будет выполнена команда npm install npm run build параметр artifacts позволяет указать какие файлы должны попасть в итоговое приложение по умолчанию будут скопированы все файлы в корень папки приложения параметр artifacts в отличие от других параметров это не строка а словарь ключ в нем это маска файлов источника копирования а значение папка в которую будут скопированы файлы так значение artifacts по умолчанию yaml build artifacts мы используем следующие правила копирования в качестве источника указываются только относительные пути без в начале если под маску попал файл файл будет скопирован в папку назначения без исходного пути если под маску попала папка она будет скопирована целиком в папку назначения вместе со всем содержимым секция run секция run может содержать следующие параметры scriptname scriptarguments nodearguments command persistencemount persistencemount параметр scriptname является обязательным для запуска используется команда node run nodearguments run scriptname run scriptarguments параметр scriptname это путь до скрипта который нужно запустить относительно корня репозитория yaml run scriptname index js если нужно передать дополнительные аргументы node для запуска их нужно указать в параметре nodearguments если нужно передать дополнительные аргументы сприкту для запуска их нужно указать в параметре scriptarguments параметр command это альтернативный способ запустить приложение при использовании этого параметра игнорируются параметры scriptname scriptarguments и nodearguments он должен содержать полную команду запуска yaml run command npm run start параметр persistencemount позволяет указать в какую директорию будет примонтирована папка с постоянным хранилищем storage md data по умолчанию имеет значение data параметр containerport позволяет указать какой порт слушает приложение по умолчанию имеет значение 80 рецепты минимальный файл amvera yml yaml meta environment node toolchain name npm version 18 run scriptname index js приложение на express js yaml meta environment node toolchain name npm version 18 run scriptname index js containerport 3000 приложение с фазой сборки webpack tsc и т п данный файл предполагает что скрипт запуска сборки прописан в задаче build а также скрипт запуска приложения прописан в задаче start в файле package json yaml meta environment node toolchain name npm version 18 build additionalcommands npm run build run command npm run start containerport 3000",
    "metadata": {
        "file_name": "nodejs-server.md",
        "section_count": 8,
        "section_1": "Node.JS Server",
        "section_2": "Секция meta",
        "section_3": "Секция build",
        "section_4": "Секция run",
        "section_5": "Рецепты",
        "section_6": "Минимальный файл amvera.yml",
        "section_7": "Приложение на Express.JS",
        "section_8": "Приложение с фазой сборки (Webpack, tsc и т.п.)"
    }
}